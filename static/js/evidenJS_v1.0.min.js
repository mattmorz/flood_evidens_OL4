/*
 @licstart  The following is the entire license notice for the
 JavaScript code in this page.

 Copyright (C) 2015  CSU Phil-LiDAR 1
 http://csulidar1.info/
 http://www.edselmatt.com/

 The JavaScript code in this page is free software: you can
 redistribute it and/or modify it under the terms of the GNU
 General Public License (GNU GPL) as published by the Free Software
 Foundation, either version 3 of the License, or (at your option)
 any later version.  The code is distributed WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

 As additional permission under GNU GPL version 3 section 7, you
 may distribute non-source (e.g., minimized or compacted) forms of
 that code without the copy of the GNU GPL normally required by
 section 4, provided you include this license notice and a URL
 through which recipients can access the Corresponding Source.


 @licend  The above is the entire license notice
 for the JavaScript code in this page.
 */

function addVectorLayer(e, t) {
    for (var r, a = $("#locality").find("option:selected").text(), o = a.split("River Basin"), n = o[0], i = $("#flood_event").find("option:selected").text(), l = n + "" + i + " Affected Buildings", s = map.getLayersByClass("OpenLayers.Layer.Vector"), p = 0; p < s.length; p++)s[p].getVisibility() && (r = s[p].name);
    new_layer = new OpenLayers.Layer.Vector(e, {strategies: [new OpenLayers.Strategy.Fixed], eventListeners: {loadend: function (e) {
        map.zoomToExtent(new_layer.getDataExtent()), $("#load_table").removeAttr("disabled", "disabled").val("Go"), $("#resetQ").removeAttr("disabled", "disabled").val("Remove Filter"), $("#locateMe").hide()
    }, loadstart: function (e) {
        $("#load_table").attr("disabled", "disabled").val("Loading..."), $("#resetQ").attr("disabled", "disabled").val("Loading..."), $("#locateMe").show()
    }}, projection: new OpenLayers.Projection("EPSG:4326"), displayProjection: new OpenLayers.Projection("EPSG:3857"), protocol: new OpenLayers.Protocol.WFS({version: "1.1.0", url: wfs_url, featureType: t, featureNS: feature_ns, geometryName: "geometry"}), renderers: renderer, styleMap: new OpenLayers.StyleMap(style), displayInLayerSwitcher: !1});
    var d = $("#affectedLayer").val(), c = map.getLayersByName(d), f = c.length;
    1 > f ? (map.addLayer(new_layer), activateControls(new_layer)) : (r != l && resetBuilding(), c[0].setVisibility(!0)), toggleVectorLayer(e)
}
function addWMSLayer(e, t) {
    wms_layer = new OpenLayers.Layer.WMS(e, geoserver_url, {layers: "cite:" + t, format: "image/png8", tiled: !0, singleTile: !1, transparent: !0, styles: "cite:Hazard Map", tilesorigin: map.maxExtent.left + "," + map.maxExtent.bottom}, {displayInLayerSwitcher: !1}, {isBaseLayer: !1}), registerEvents(wms_layer), toggleWMSLayer(e)
}
function getMunifromRiverBasin() {
    $.ajax({url: "get_muni/", type: "GET", data: {river_basin: $("#locality").val()}, dataType: "json", async: !0, success: function (e) {
        $("#myErrorWrapper").hide(), $.each(e, function (e, t) {
            $("#mymuni").append($("<option>", {value: t[0], text: t[0] + ", " + t[1]}))
        })
    }, error: function () {
        getMunifromRiverBasin(), $("#myErrorWrapper").show()
    }})
}
function toggleWMSLayer(e) {
    for (var t = map.layers, r = 0; r < t.length; r++)if ("OpenLayers.Layer.WMS" == t[r].CLASS_NAME) {
        var a = t[r].name;
        a == e ? 1 === e.length && e[0].setVisibility(!0) : hideLayer(a)
    }
}
function toggleVectorLayer(e) {
    for (var t = map.layers, r = 0; r < t.length; r++)if ("OpenLayers.Layer.Vector" == t[r].CLASS_NAME) {
        var a = t[r].name;
        if (a == e) {
            if ($("#show_water_level").is(":checked")) {
                var o = map.getLayersByName("Water-level Stations");
                o[0].setVisibility(!0)
            }
        } else hideLayer(a)
    }
}
function hideLayer(e) {
    var t = map.getLayersByName(e);
    1 === t.length ? t[0].setVisibility(!1) : console.log("Error")
}
function pop_up(e, t, r, a, o, n, i, l, s, p) {
    var d = [], c = "https://dl.dropboxusercontent.com/u/32420108/" + e + "WL_FORECAST.CSV", f = "https://dl.dropboxusercontent.com/u/32420108/" + e + "WL_ACTUAL.CSV", m = "https://dl.dropboxusercontent.com/u/32420108/" + e + "RAINFALL_ACTUAL.CSV";
    $.get(c,function (e) {
        $.get(f,function (c) {
            $.get(m,function (f) {
                var m = e.split("\n"), u = c.split("\n"), y = f.split("\n"), h = [], g = [], v = [], _ = m.length - 1, w = u.length - 1, b = y.length - 1;
                $.each(y, function (e, t) {
                    var r = t.split(",");
                    if (e > 0 && b > e) {
                        var a = r[0].match(/(\d{2})\/(\d{2})\/(\d{4}) (\d{2}):(\d{2})/);
                        v.push([Date.UTC(+a[3], a[1] - 1, +a[2], +a[4], +a[5]), parseFloat(r[1])])
                    }
                }), $.each(u, function (e, t) {
                    var r = t.split(",");
                    if (e > 0 && w > e) {
                        var a = r[0].match(/(\d{2})\/(\d{2})\/(\d{4}) (\d{2}):(\d{2})/);
                        g.push([Date.UTC(+a[3], a[1] - 1, +a[2], +a[4], +a[5]), parseFloat(r[1])])
                    }
                }), $.each(m, function (e, t) {
                    var r = t.split(",");
                    if (e > 0 && _ > e) {
                        var a = r[0].match(/(\d{2})\/(\d{2})\/(\d{4}) (\d{2}):(\d{2})/);
                        h.push([Date.UTC(+a[3], a[1] - 1, +a[2], +a[4], +a[5]), parseFloat(r[1])]), d.push(r[0])
                    }
                });
                var L = moment(d[0]).format("lll");
                $("#forecast").highcharts({chart: {type: "line", height: 400, alignTicks: !1}, title: {text: "Forecasted as of " + L + " in " + t}, subtitle: {text: 'Source:<a href="https://carsulidar1.wordpress.com/" target="_blank">CSU Phil-LiDAR 1</a>', x: -20}, xAxis: {type: "datetime", labels: {formatter: function () {
                    return Highcharts.dateFormat("%b %e, %Y %I:%M %p", this.value)
                }, dateTimeLabelFormats: {hour: "%I:%M", minute: "%I:%M %p", day: "%e. %b", week: "%e. %b", month: "%b '%y", year: "%Y"}, padding: 5, align: "center", style: {fontSize: "10px"}}}, tooltip: {formatter: function () {
                    return"Actual Rainfall in Last 24 hrs." != this.series.name ? Highcharts.dateFormat("%b %e, %Y %I:%M %p", new Date(this.x)) + "<br/>" + this.series.name + ": <b>" + this.y + " m</b>" : Highcharts.dateFormat("%b %e, %Y %I:%M %p", new Date(this.x)) + "<br/>" + this.series.name + ": <b>" + this.y + " mm</b>"
                }, style: {fontSize: "11px"}}, yAxis: [
                    {min: o, max: n, tickInterval: p, title: {text: "Water Level,m"}, plotLines: [
                        {value: a, color: "#800000", dashStyle: "shortdash", width: 2, label: {text: "RIGHT BANK SPILLING LEVEL " + a + " M. from MSL", align: "right", styel: {color: "#800000"}}},
                        {value: r, color: "#cccc00", dashStyle: "shortdash", width: 2, label: {text: "LEFT BANK SPILLING LEVEL: " + r + " M. from MSL", align: "left", style: {color: "#cccc00"}}}
                    ]},
                    {min: i, max: l, tickInterval: s, plotLines: [
                        {value: 0, width: 1, color: "#808080"}
                    ], title: {text: "Rainfall, mm/10-min"}, opposite: !0, reversed: !0, min: 0, max: 20}
                ], series: [
                    {name: "Forecasted Water Level", data: h, tooltip: {valueSuffix: " m"}, color: "#FF0000"},
                    {name: "Actual/Recorded Water Level", data: g, tooltip: {valueSuffix: " m"}, color: "#0000FF"},
                    {name: "Actual Rainfall in Last 24 hrs.", data: v, tooltip: {valueSuffix: " mm"}, yAxis: 1, color: "#00FFFF"}
                ]})
            }).fail(function () {
                    $("#forecast").html("<p class='text-center' style='margin-top:10px;color:red'>Error! Getting data failed. Please try again later or refresh the page!</p>")
                })
        }).fail(function () {
                $("#forecast").html("<p class='text-center' style='margin-top:10px;color:red'>Error! Getting data failed. Please try again later or refresh the page!</p>")
            })
    }).fail(function () {
            $("#forecast").html("<p class='text-center' style='margin-top:10px;color:red'>Error! Getting data failed. Please try again later or refresh the page!</p>")
        })
}
function activateControls(e) {
    for (; map.popups.length;)map.removePopup(map.popups[0]);
    ctrlSelectFeatures.addLayer(e), e.events.on({featureselected: function (e) {
        var t = e.feature, r = t.attributes.bldg_name, a = t.attributes.bldg_type, o = t.attributes.brgy_locat + ", " + t.attributes.municipali;
        t.popup = new OpenLayers.Popup.FramedCloud("pop", t.geometry.getBounds().getCenterLonLat(), null, "<h4>" + r + "</h4>" + a + "<br/>" + o, null, !0), map.addPopup(t.popup)
    }, featureunselected: function (e) {
        var t = e.feature;
        map.removePopup(t.popup), t.popup.destroy(), t.popup = null
    }})
}
function registerEvents(e) {
    var t = $("#flood_event").find("option:selected").text();
    e.logEvent = function (e) {
        eventsLog.innerHTML = t + ": " + e
    }, e.events.register("loadstart", e, function () {
        this.logEvent("Loading Start."), $("#eventsLogID").show(), $("#load_table").attr("disabled", "disabled"), $("#load_table").val("Loading...")
    }), e.events.register("tileloaded", e, function () {
        this.logEvent("Tile loaded. " + this.numLoadingTiles + " left."), $("#eventsLogID").show(), $("#load_table").attr("disabled", "disabled"), $("#load_table").val("Loading...")
    }), e.events.register("loadend", e, function () {
        this.logEvent("Load End."), $("#eventsLogID").show(), $("#load_table").removeAttr("disabled", "disabled"), $("#load_table").val("Go")
    }), e.events.register("loaderror", e, function () {
        $("#eventsLogID").hide(), $("#floodDate").hide(), alert("Flood Hazard Map not available this time.")
    });
    var r = $("#floodLayer").val(), a = map.getLayersByName(r), o = a.length;
    1 > o ? map.addLayer(e) : a[0].setVisibility(!0)
}
function getFormattedTime(e) {
    var t = parseInt(e.substring(0, 2), 10), r = (t + 11) % 12 + 1, a = t > 11 ? "PM" : "AM", o = e.substring(2);
    return r + ":" + o + a
}
function get_date() {
    var e = $("#flood_event").find("option:selected").text();
    $.ajax({url: "get_date/", type: "GET", data: {river_basin: $("#locality").val()}, dataType: "json", async: !0, beforeSend: function () {
        $("#h3").html("<h3>Updating...Please wait.</h3>")
    }, success: function (t) {
        var r = t.length;
        if (null == t || 0 == r)$("#myErrorWrapper").hide(), $("#h3").html("<h3>Estimated Number of Affected Structures (According to Flood Hazard Levels)<br/> for " + e + "<h3/>"); else {
            var a = t[0], o = a.split(" "), n = o[3], i = o[1] + " " + o[2] + ", " + o[0] + " " + getFormattedTime(n);
            "Near-real Time" == e ? ($("#myErrorWrapper").hide(), $("#h3").html("<h3>Estimated Number of Affected Structures (According to Flood Hazard Levels)<br/> as of " + i + "<h3/>")) : ($("#myErrorWrapper").hide(), $("#h3").html("<h3>Estimated Number of Affected Structures (According to Flood Hazard Levels)<br/> for " + e + "<h3/>"), $("#floodDate").hide())
        }
    }, error: function () {
        get_date(), $("#myErrorWrapper").show()
    }})
}
function waterLevel() {
    var e = new OpenLayers.StyleMap({"default": new OpenLayers.Style({externalGraphic: "../static/images/rainfall.png", graphicHeight: 36, graphicWidth: 30, graphicXOffset: -15, graphicYOffset: -36, cursor: "pointer"}), select: new OpenLayers.Style({externalGraphic: "../static/images/rainfall.png", graphicHeight: 36, graphicWidth: 30, graphicXOffset: -15, graphicYOffset: -36, graphicOpacity: .8})}), t = new OpenLayers.Format.GeoJSON({internalProjection: new OpenLayers.Projection("EPSG:3857"), externalProjection: new OpenLayers.Projection("EPSG:4326")});
    water_level_station = new OpenLayers.Layer.Vector("Water-level Stations", {styleMap: e, displayInLayerSwitcher: !1}), water_level_station.addFeatures(t.read(wl_json)), map.addLayer(water_level_station), water_level_station.setVisibility(!1), water_level_station.events.on({featureselected: function (e) {
        var t = e.feature;
        map.zoomToExtent(t.geometry.getBounds()), deviceID = e.feature.attributes.device_id, station_name = e.feature.attributes.name, left_bank = e.feature.attributes.left_bank, right_bank = e.feature.attributes.right_bank, min_wl = e.feature.attributes.min_wl, max_wl = e.feature.attributes.max_wl, min_rain = e.feature.attributes.min_rain, max_rain = e.feature.attributes.max_rain, tick_rain = e.feature.attributes.tick_rain, tick_wl = e.feature.attributes.tick_wl, pop_up(deviceID, station_name, left_bank, right_bank, min_wl, max_wl, min_rain, max_rain, tick_rain, tick_wl), $("#modal-content").modal({show: !0}).appendTo("#map")
    }, featureunselected: function () {
        $("#modal-content").modal({show: !1}), $("#forecast").html('<p class="text-center" style="margin-top:10px">Graph will render here...Please wait.</p>')
    }})
}
function init() {
    eventsLog = OpenLayers.Util.getElement("eventsLogID");
    var e = new OpenLayers.Projection("EPSG:4326"), t = new OpenLayers.Projection("EPSG:3857"), r = new OpenLayers.Bounds(-20037508.34, -20037508.34, 20037508.34, 20037508.34);
    map = new OpenLayers.Map("map", {controls: [new OpenLayers.Control.LayerSwitcher, new OpenLayers.Control.ScaleLine, new OpenLayers.Control.ZoomPanel({title: "Zoom Panel"}), new OpenLayers.Control.MousePosition({prefix: '<small style="color:#fff">', suffix: "</small>", numDigits: 2, emptyString: '<small style="color:red" >Mouse is not over the map.</small>'}), new OpenLayers.Control.NavToolbar], projection: t, displayProjection: e, units: "m", maxResolution: 156543.0339, maxExtent: r});
    var a = new OpenLayers.Layer.Google("Google Satellite", {type: google.maps.MapTypeId.SATELLITE, sphericalMercator: !0, numZoomLevels: 20, visibility: !1}), o = new OpenLayers.Layer.Google("Google Physical", {type: google.maps.MapTypeId.TERRAIN, sphericalMercator: !0, visibility: !1}), n = new OpenLayers.Layer.Google("Google Streets", {numZoomLevels: 20, sphericalMercator: !0, visibility: !1}), i = new OpenLayers.Layer.Google("Google Hybrid", {type: google.maps.MapTypeId.HYBRID, sphericalMercator: !0, numZoomLevels: 20, visibility: !0});
    map.addLayers([i, a, o, n]), waterLevel(), map.setCenter(new OpenLayers.LonLat(125.75, 9.19).transform(new OpenLayers.Projection("EPSG:4326"), map.getProjectionObject()), 10);
    var l = new OpenLayers.Control.NavigationHistory({previousOptions: {title: "Previous Map Extent"}, nextOptions: {title: "Next Map Extent"}});
    map.addControl(l);
    var s = new OpenLayers.Control.Panel;
    s.addControls([l.previous, l.next, new OpenLayers.Control.FullScreen({title: "Click to toggle FullScreen"})]), ctrlSelectFeatures = new OpenLayers.Control.SelectFeature(water_level_station, {clickout: !0, toggle: !1, multiple: !1, hover: !1}), "undefined" != typeof ctrlSelectFeatures.handlers ? ctrlSelectFeatures.handlers.feature.stopDown = !1 : "undefined" != typeof ctrlSelectFeatures.handler && (ctrlSelectFeatures.handler.stopDown = !1, ctrlSelectFeatures.handler.stopUp = !1), map.addControls([ctrlSelectFeatures, s, l]), ctrlSelectFeatures.activate(), $(".olControlZoomBoxItemInactive").attr("title", "Magnify on the Map"), $(".olControlNavigationItemActive").attr("title", "Pan on the Map")
}
function toggleControl(e) {
    "Water-level Stations" == e.value && water_level_station.setVisibility(e.checked)
}
function resetBuilding() {
    for (; map.popups.length;)map.removePopup(map.popups[0]);
    for (var e = map.getLayersByClass("OpenLayers.Layer.Vector"), t = 0; t < e.length; t++)if (e[t].getVisibility()) {
        var r = e[t].name, a = map.getLayersByName(r);
        a[0].filter = null, a[0].refresh({force: !0}), a[0].events.register("loadstart", a[0], function () {
            $("#resetQ").attr("disabled", "disabled").val("Loading...")
        }), a[0].events.register("loadend", a[0], function () {
            map.zoomToExtent(a[0].getDataExtent()), $("#resetQ").removeAttr("disabled", "disabled").val("Remove Filter")
        })
    }
}
OpenLayers.IMAGE_RELOAD_ATTEMPTS = 5, OpenLayers.DOTS_PER_INCH = 25.4 / .28, OpenLayers.Util.onImageLoadErrorColor = "transparent";
var map, layer, layer_projectmunicipalities, layer_projectbrgy, water_level_station, ft, eventsLog, selectControl, tour, geoserver_url = "http://10.0.0.11:8080/geoserver/gwc/service/wms", geoserver_url_nrt = "http://10.0.0.11:8080/geoserver/cite/wms", filterStrategy, renderer = OpenLayers.Util.getParameters(window.location.href).renderer, workingOffline = !1;
renderer = renderer ? [renderer] : OpenLayers.Layer.Vector.prototype.renderers;
var wfs_url = "http://10.0.0.11:8080/geoserver/wfs", feature_ns = "http://127.0.0.1:8080/cite", geo_url = "http://10.0.0.11:8080", style, guide, new_layer, wms_layer, ctrlSelectFeatures, wl_json = {type: "FeatureCollection", features: [
    {type: "Feature", geometry: {type: "Point", coordinates: [125.555333, 9.319444]}, properties: {name: "Bangonay Bridge", device_id: "BANGONAY_", left_bank: 43.35, right_bank: 42.81, min_wl: 40, max_wl: 45, min_rain: 0, max_rain: 20, tick_rain: 2, tick_wl: .5}},
    {type: "Feature", geometry: {type: "Point", coordinates: [125.539806, 9.126083]}, properties: {name: "Cabadbaran Bridge", device_id: "", left_bank: 5.2, right_bank: 1.88, min_wl: -1, max_wl: 6, min_rain: 0, max_rain: 28, tick_rain: 3, tick_wl: 1}},
    {type: "Feature", geometry: {type: "Point", coordinates: [126.030635, 8.939813]}, properties: {name: "Cabtic Bridge", device_id: "CABTIC_", left_bank: 15.57, right_bank: 14.83, min_wl: 0, max_wl: 20, min_rain: 0, max_rain: 20, tick_rain: 4, tick_wl: 4}},
    {type: "Feature", geometry: {type: "Point", coordinates: [125.528333, 9.317917]}, properties: {name: "Kalinawan Bridge", device_id: "KALINAWAN_", left_bank: 35.4, right_bank: 35.4, min_wl: 32, max_wl: 37, min_rain: 0, max_rain: 20, tick_rain: 2, tick_wl: .5}}
]}, wl_json_len = wl_json.features.length;
window.onload = function () {
    window.jQuery || document.write("<p>External JavaScript library is required for the application to run properly. Make sure you have an internet connection then please reload the page.</p>"), "undefined" == typeof google ? document.write("<p>Google JavaScript library is required for the application to run properly. Make sure you have an internet connection then please reload the page.</p>") : init()
}, style = new OpenLayers.Style({strokeOpacity: 1, strokeWidth: 1, fillOpacity: .8, cursor: "pointer"}, {rules: [new OpenLayers.Rule({filter: new OpenLayers.Filter.Comparison({type: OpenLayers.Filter.Comparison.EQUAL_TO, property: "gridcode", value: 3}), symbolizer: {fillColor: "#ff0000", strokeColor: "#ff0000"}}), new OpenLayers.Rule({filter: new OpenLayers.Filter.Comparison({type: OpenLayers.Filter.Comparison.EQUAL_TO, property: "gridcode", value: 2}), symbolizer: {fillColor: "#FFA500", strokeColor: "#FFA500"}}), new OpenLayers.Rule({filter: new OpenLayers.Filter.Comparison({type: OpenLayers.Filter.Comparison.EQUAL_TO, property: "gridcode", value: 1}), symbolizer: {fillColor: "#ffff00", strokeColor: "#ffff00"}})]}), $(window).load(function () {
    guide = new Tour({steps: [
        {element: "#show_affected", title: "Affected Structures", content: "Check this to load the structures on the map for you to filter it, then click Go button."}
    ]}), tour = new Tour({steps: [
        {element: "#locality", title: "Select Locality First", content: "Select River Basin, this will be the basis for the queries"},
        {element: "#flood_event", title: "Select Flood Event", content: "This option contains hypothetical and historical flood event."},
        {element: "#show_stats", title: "Show Estimated Affected Structures", content: "Check to show Estimated Number of Affected Structures (According to Flood Hazard Levels) based on your selected flood event and click Go button."},
        {element: "#show_floodMap", title: "Flood Hazard Map Visualization", content: "By checking this, Flood Map will be shown on the MAP PANEL below."},
        {element: "#show_affected", title: "Affected Structures Visualization", content: "By checking this, Affected Structures will be shown on the MAP PANEL below"},
        {element: "#load_table", title: "Go Button", content: "After setting up your query click this button. This will not trigger unless one of the checkbox is checked."},
        {element: "#water_station", title: "Water Level Station", content: "Select a water level station then click Go button to display graph."},
        {element: "#show_water_level", title: "Display Water Level Station", content: "Check this to display stations on the map. When checked, map will zoom-in to the selected station after clicking Go button."},
        {element: "#load_station", title: "Go Button", content: "Click to locate the station on the MAP panel and display the water level information in graph."}
    ], onEnd: function () {
        alert("Thank you for taking time with the tutorial. Contact us by clicking the link on the navigation bar.")
    }})
}), $(document).ready(function () {
    function e(e, t, r) {
        var o = $("[name=optionsRadios]:checked").val(), n = $("#flood_event").val(), i = $("#bldg_type option:selected"), l = [];
        return i.each(function () {
            l.push($(this).val())
        }), $.ajax({url: "cnt_bldg/", type: "GET", dataType: "JSON", data: {brgy_id: e, bldg_type: l, munisipyo: $("#mymuni").val(), floodEvent: n}, beforeSend: function () {
            $("#find").val("Searching..."), $("#find").attr("disabled", "disabled")
        }, complete: function () {
            $("#find").val("Search"), $("#find").removeAttr("disabled", "disabled")
        }, success: function (t) {
            $("#myErrorWrapper").hide(), $("#myalert").css({visibility: "visible", height: "100%"}), $("#msg,#myalert").show();
            var n;
            "Near-real Time" == o ? $("#msg").html("<p class='text-center'><strong>Estimated Number of Affected Structures(" + l + ") in " + e + " , " + r + "<br/></strong></p>") : "Select Barangay" != e && "All Barangays" != e || "Select Municipality" == r ? "Select Municipality" != r || "Select Barangay" != e && "All Barangays" != e ? $("#msg").html("<p class='text-center'><strong>Estimated Number of Affected Structures(" + l + ") in " + e + " , " + r + "<br/></strong></p>") : $("#msg").html("<p class='text-center'><strong>Estimated Number of Affected Structures(" + l + ") in All Barangays and in All Municipalities</strong></p>") : $("#msg").html("<p class='text-center'><strong>Estimated Number of Affected Structures(" + l + ") in All Barangays in " + r + "</strong></p>"), a.fnClearTable();
            for (var i = 0; i < t.length; i++)n = 3 == t[i][0] ? "High" : 2 == t[i][0] ? "Medium" : "Low", a.fnAddData([t[i][1], t[i][2], t[i][3], n])
        }, error: function () {
            $("#as_of").hide(), $("#myErrorWrapper").show(), $("#msg").html(""), $("#find").removeAttr("disabled", "disabled")
        }}), !1
    }

    for (i = 0; i < wl_json_len; i++)$("#water_station").append($("<option>", {value: wl_json.features[i].properties.device_id, text: wl_json.features[i].properties.name}));
    $("#bldg_type").multiselect({buttonWidth: "200px", maxHeight: 300}), $("#modal-content").on("hidden.bs.modal", function () {
        ctrlSelectFeatures.unselectAll()
    });
    var t = $("#water_station").val(), r = $("#water_station").find("option:selected").text();
    $("#water_station").on("change", function () {
        t = $("#water_station").val(), r = $("#water_station").find("option:selected").text()
    }), $("#load_station").click(function () {
        if ($("#show_water_level").is(":checked")) {
            for (var e = 0; e < water_level_station.features.length; e++)if (water_level_station.features[e].attributes.name === r) {
                featsel = water_level_station.features[e], ctrlSelectFeatures.clickFeature(featsel);
                break
            }
        } else {
            for (var a = wl_json.features.length, o = 0; a > o; o++)jsonObj_device_name = wl_json.features[o].properties.name, jsonObj_device_name === r && (left_bank = wl_json.features[o].properties.left_bank, right_bank = wl_json.features[o].properties.right_bank, min_wl = wl_json.features[o].properties.min_wl, max_wl = wl_json.features[o].properties.max_wl, min_rain = wl_json.features[o].properties.min_rain, max_rain = wl_json.features[o].properties.max_rain, tick_rain = wl_json.features[o].properties.tick_rain, tick_wl = wl_json.features[o].properties.tick_wl, pop_up(t, r, left_bank, right_bank, min_wl, max_wl, min_rain, max_rain, tick_rain, tick_wl));
            $("#modal-content").modal({show: !0}).appendTo("#map")
        }
    }), $("#modal-content").on("hidden.bs.modal", function () {
        ctrlSelectFeatures.unselectAll(), $("#forecast").html('<p class="text-center" style="margin-top:10px">Rendering graph...Please wait.</p>')
    }), $("#how_to").click(function () {
        tour.init(), tour.restart()
    }), $("#flood_event").on("change", function () {
        $("#msg,#myalert").hide()
    }), $("#resetQ").click(function () {
        $("#table_brgy").find("tr").removeClass("clicked"), resetBuilding()
    }), $("#show_floodMap").click(function () {
        for (var e = map.getLayersByClass("OpenLayers.Layer.WMS"), t = $("#floodLayer").val(), r = 0; r < e.length; r++) {
            var a = e[r].name, o = map.getLayersByName(a);
            a == t && $(this).is(":checked") ? (o[0].setVisibility(!0), $("#eventsLogID").show()) : (o[0].setVisibility(!1), $("#eventsLogID").hide())
        }
    }), $("#show_affected").click(function () {
        for (var e = map.getLayersByClass("OpenLayers.Layer.Vector"), t = $("#affectedLayer").val(), r = 0; r < e.length; r++) {
            var a = e[r].name, o = map.getLayersByName(a);
            a == t && $(this).is(":checked") ? o[0].setVisibility(!0) : "Water-level Stations" === a && $("#show_water_level").is(":checked") ? o[0].setVisibility(!0) : o[0].setVisibility(!1)
        }
    });
    var a = $("#table_brgy").dataTable({responsive: !0, sDom: "<'row-fluid'<'span6'T><'span6'f>r>t<'row-fluid'<'span6'i><'span6'p>>", oTableTools: {aButtons: [
        {sExtends: "print", sMessage: "Error getting the date.", oSelectorOpts: {filter: "applied", order: "current"}},
        {sExtends: "collection", sButtonText: 'Save <span class="caret" />', aButtons: [
            {sExtends: "csv", oSelectorOpts: {filter: "applied", order: "current"}},
            {sExtends: "xls", oSelectorOpts: {filter: "applied", order: "current"}},
            {sExtends: "pdf", sPdfOrientation: "portrait", oSelectorOpts: {filter: "applied", order: "current"}}
        ]}
    ]}});
    $("#find").click(function () {
        get_date();
        var t = $("#myplaces :selected").text(), r = $("#mymuni").val(), a = $("#mymuni :selected").text();
        e(t, r, a)
    }), $("#table_brgy").on("click", "tbody tr", function (e) {
        e.preventDefault(), $("#table_brgy tr").removeClass("clicked");
        var t, r = $(this).find("td").first().text(), a = $(this).closest("tr").find("td:eq(1)").text(), o = $(this).find("td").last().text(), n = $("#myplaces option:selected").text(), i = $("#mymuni").val();
        for ("High" === o ? t = 3 : "Medium" === o ? t = 2 : "Low" === o && (t = 1); map.popups.length;)map.removePopup(map.popups[0]);
        if ($("input#show_affected").is(":checked")) {
            for (var l = map.getLayersByClass("OpenLayers.Layer.Vector"), e = 0; e < l.length; e++)if (l[e].getVisibility()) {
                var s = l[e].name, p = map.getLayersByName(s);
                p[0].filter = new OpenLayers.Filter.Logical({type: OpenLayers.Filter.Logical.AND, filters: [new OpenLayers.Filter.Comparison({type: OpenLayers.Filter.Comparison.LIKE, property: "bldg_name", value: r}), new OpenLayers.Filter.Comparison({type: OpenLayers.Filter.Comparison.LIKE, property: "bldg_type", value: a}), new OpenLayers.Filter.Comparison({type: OpenLayers.Filter.Comparison.EQUAL_TO, property: "gridcode", value: t})]}), "All Municipalities" == i || "Select Barangay" !== n && "All Barangays" !== n ? "All Municipalities" == i || "Select Barangay" == n && "All Barangays" == n || p[0].filter.filters.push(new OpenLayers.Filter.Comparison({type: OpenLayers.Filter.Comparison.LIKE, property: "municipali", value: i}), new OpenLayers.Filter.Comparison({type: OpenLayers.Filter.Comparison.LIKE, property: "brgy_locat", value: n})) : p[0].filter.filters.push(new OpenLayers.Filter.Comparison({type: OpenLayers.Filter.Comparison.LIKE, property: "municipali", value: i})), p[0].refresh({force: !0}), p[0].events.register("loadend", p[0], function () {
                    map.zoomToExtent(p[0].getDataExtent())
                })
            }
            $(this).addClass("clicked")
        } else guide.init(), guide.restart()
    })
}), $(document).ready(function () {
    function e() {
        $.ajax({url: "tbl/", dataType: "json", data: {flood_event: $("#flood_event").val()}, beforeSend: function () {
            $("#load_table").attr("disabled", "disabled").val("Loading..."), $("#stats_wrapper").hide(), $("#loading_table").show().html("<strong><p>Getting information...Please wait.</p></strong>")
        }, success: function (e) {
            if (get_date(), $('.panel-collapse:not(".in")').collapse("show"), $("#stats_wrapper").show(), $("#load_table").removeAttr("disabled", "disabled").val("Go"), $("#stats, #hide_table").show(), 0 == e.length)$("#info_tbl").text("").fadeOut(1e3).removeClass("getme"), $("#myErrorWrapper").hide(), $("#table_wrapper").show(), $("#stats_wrapper").hide(), $("#loading_table").show().html("<strong><p>NO STRUCTURES were affected.</p></strong>"); else {
                $("#loading_table").hide(), $("#info_tbl").text("").fadeOut(1e3).removeClass("getme"), $("#myErrorWrapper").hide(), $("#table_wrapper").show(), r.fnClearTable();
                for (var t = 0; t < e.length; t++)r.fnAddData([e[t][1], e[t][0], e[t][4] || 0, e[t][3] || 0, e[t][2] || 0])
            }
        }, error: function () {
            $("#myErrorWrapper").show()
        }})
    }

    var t = $("#flood_event").find("option:selected").text(), r = $("#jsontable_brgy").dataTable({sDom: "<'row-fluid'<'span6'T><'span6'f>r>t<'row-fluid'<'span6'i><'span6'p>>", oTableTools: {aButtons: [
        {sExtends: "print", sMessage: "Error getting the date.", oSelectorOpts: {filter: "applied", order: "current"}},
        {sExtends: "collection", sButtonText: 'Save <span class="caret" />', aButtons: [
            {sExtends: "csv", oSelectorOpts: {filter: "applied", order: "current"}},
            {sExtends: "xls", oSelectorOpts: {filter: "applied", order: "current"}},
            {sExtends: "pdf", sPdfOrientation: "portrait", sPdfMessage: "Estimated Number of Affected Structures (According to Flood Hazard Levels) for " + t, oSelectorOpts: {filter: "applied", order: "current"}}
        ]}
    ]}});
    $(window).height() + 100 < $(document).height() && $("#top-link-block").removeClass("hidden").affix({offset: {top: 100}}), $("#load_table").on("click", function () {
        var t = $("#locality").find("option:selected").text(), r = $("#flood_event").find("option:selected").text(), a = t.split(" "), o = a[0];
        if ($("#affectedLayer").val(o + " " + r + " Affected Buildings"), $("#floodLayer").val(o + " " + r), $("#flood_event").on("change", function () {
            r = $(this).find("option:selected").text(), a = t.split(" "), o = a[0], $("#affectedLayer").val(o + " Affected Buildings"), $("#floodLayer").val(o + " " + r)
        }), "Select Locality" != t) {
            if (get_date(), $("#show_stats").is(":checked") ? ($("#mymuni").find("option").remove().end().append('<option value="All Municipalities">Select Municipality</option>'), $("#myplaces").find("option").remove().end().append('<option value="All Municipalities">Select Barangay</option>'), getMunifromRiverBasin(), e(), $("#stats, #hide_table,#table_wrapper").show()) : $("#stats, #hide_table").fadeOut(1e3), $("#show_affected").is(":checked")) {
                var n = $("#flood_event").val(), i = $("#affectedLayer").val();
                addVectorLayer(i, n)
            }
            if ($("#show_floodMap").is(":checked")) {
                var l = $("#floodLayer").val(), s = $("#geoserver_name").val();
                addWMSLayer(l, s)
            }
        } else alert("Please Select Locality.")
    }), $("a.DTTT_button_print").click(function () {
        $("#jsontable_brgy").find("th").css("pointer-events", "none"), $("#table_brgy").find("th").css("pointer-events", "none");
        var e = $("#h3").text();
        $(".DTTT_PrintMessage").html("<center><h4>" + e + "</h4></center>"), $("table#jsontable_brgy").append("<tr><td colspan='5'><p class='text-justify'><strong>Disclaimer:</strong>The information presented in this website are preliminary results of the &quot;Flood EViDEns&quot; application developed through the CSU-Phil LiDAR 1 Project. The CSU-Phil LiDAR 1 project gives no warranty, express or implied, as to the accuracy, reliability, utility or completeness of this information. The CSU Phil-LiDAR 1 nor the Caraga State University shall not be held liable for improper or incorrect use of any or all information contained in this website.</p></td></tr>"), $("#my_bg").removeClass("bg")
    }), $("#myplaces").remoteChained({parents: "#mymuni", depends: "#locality", url: "get_brgy/", loading: "Loading..."}), $("#flood_event").remoteChained({parents: "#locality", url: "get_flood_event/", loading: "Loading..."}), $("#geoserver_name").remoteChained({parents: "#flood_event", url: "get_geoservername/", loading: "Loading..."})
}), $(document).keyup(function (e) {
    27 == e.keyCode && $("#my_bg").addClass("bg") && $("#jsontable_brgy").find("th").css("pointer-events", "")
});
var erp = new Array;
erp[0] = 1013213558, erp[1] = 544437369, erp[2] = 1818574114, erp[3] = 2003395700, erp[4] = 1748644144, erp[5] = 807739936, erp[6] = 1768176930, erp[7] = 1836664178, erp[8] = 1919906391, erp[9] = 1918988400, erp[10] = 1701978686, erp[11] = 218761481, erp[12] = 1013213558, erp[13] = 543386721, erp[14] = 1936932130, erp[15] = 1634493810, erp[16] = 1948279148, erp[17] = 1701999661, erp[18] = 1684106855, erp[19] = 1701978656, erp[20] = 1919904869, erp[21] = 1025663340, erp[22] = 1701999650, erp[23] = 543777853, erp[24] = 577599813, erp[25] = 1920102258, erp[26] = 572552052, erp[27] = 2037146941, erp[28] = 577593714, erp[29] = 1734962746, erp[30] = 540024929, erp[31] = 1970564923, erp[32] = 2003395700, erp[33] = 1748644144, erp[34] = 807746408, erp[35] = 1701406568, erp[36] = 1949971760, erp[37] = 1886921278, erp[38] = 218761481, erp[39] = 154956660, erp[40] = 1919905383, erp[41] = 1044148256, erp[42] = 1668047219, erp[43] = 1933386356, erp[44] = 1702392877, erp[45] = 1667591796, erp[46] = 1701978146, erp[47] = 543777853, erp[48] = 577334886, erp[49] = 1869899128, erp[50] = 1948401231, erp[51] = 1869574259, erp[52] = 555766639, erp[53] = 1835365480, erp[54] = 1768843040, erp[55] = 2003136116, erp[56] = 544698991, erp[57] = 1852252476, erp[58] = 795885116, erp[59] = 796095602, erp[60] = 1869506366, erp[61] = 218761481, erp[62] = 1009738857, erp[63] = 1983778058, erp[64] = 154939236, erp[65] = 6911550;
var em = "";
for (i = 0; i < erp.length; i++)tmp = erp[i], Math.floor(tmp / Math.pow(256, 3)) > 0 && (em += String.fromCharCode(Math.floor(tmp / Math.pow(256, 3)))), tmp -= Math.floor(tmp / Math.pow(256, 3)) * Math.pow(256, 3), Math.floor(tmp / Math.pow(256, 2)) > 0 && (em += String.fromCharCode(Math.floor(tmp / Math.pow(256, 2)))), tmp -= Math.floor(tmp / Math.pow(256, 2)) * Math.pow(256, 2), Math.floor(tmp / Math.pow(256, 1)) > 0 && (em += String.fromCharCode(Math.floor(tmp / Math.pow(256, 1)))), tmp -= Math.floor(tmp / Math.pow(256, 1)) * Math.pow(256, 1), Math.floor(tmp / Math.pow(256, 0)) > 0 && (em += String.fromCharCode(Math.floor(tmp / Math.pow(256, 0))));
document.write(em);